# External resources
# Set this to the location of a .zip with the server's .rsc inside of it.
# If you set this multiple times, the server will rotate between the links.
# To use this, the compile option PRELOAD_RSC must be set to 0 to keep byond from preloading resources
# Resource urls can not be encrypted (https://), as they are downloaded by byond, not IE, and byond can't into encryption
# EXTERNAL_RSC_URLS http://tgstation13.download/byond/tgstationv2.zip

########################
# Browser Asset Config #
########################
# Browser assets are any file included in interfaces. css, images, javascript, etc.
# This handles configuring how we get these to the player so interfaces can access them.

# Asset Transport
# The normal way of getting assets to clients is to use the internal byond system. This can be slow and delay the opening of interface windows. It also doesn't allow the internal IE windows byond uses to cache anything.
# You can instead have the server save them to a website via a folder within the game server that the web server can read. This could be a simple webserver or something backed by a CDN.
# Valid values: simple, webroot. Simple is the default.
#ASSET_TRANSPORT webroot

# Simple asset transport configurable values.

# Uncomment this to have the server passively send all browser assets to each client in the background. (instead of waiting for them to be needed)
# This should be uncommented in production and commented in development
#ASSET_SIMPLE_PRELOAD

# Webroot asset transport configurable values.

# Local folder to save assets to.
# Assets will be saved in the format of asset.MD5HASH.EXT or in namespaces/hash/ as ASSET_FILE_NAME or asset.MD5HASH.EXT
#ASSET_CDN_WEBROOT data/asset-store/

# URL the folder from above can be accessed from.
# for best results the webserver powering this should return a long cache validity time, as all assets sent via this transport use hash based urls
# Encryption (https) is supported here, but linux clients will have issues if you require higher then tls 1.0. Windows clients down to windows 7 can handle tls 1.2 no issue.
# if you want to test this locally, you simpily run the `localhost-asset-webroot-server.py` python3 script to host assets stored in `data/asset-store/` via http://localhost:58715/
#ASSET_CDN_URL http://localhost:58715/

# CDN webservers must provide CORS headers, or TGUI will break and not be able to load all elements. The following example is for IIS:
# <add name="Access-Control-Allow-Origin" value="*" />
# <add name="Vary" value="Origin" />
# <add name="Access-Control-Allow-Methods" value="GET, POST, OPTIONS" />
# <add name="Access-Control-Max-Age" value="0" />

## Assets can opt-in to caching their results into `cache/`.
## This is important, as preferences assets take upwards of 30 seconds (without sleeps) to collect.
## The cache is assumed to be cleared by TGS recompiling, which deletes `cache/`.
## This should be disabled (through `CACHE_ASSETS 0`) on development,
## but enabled on production (the default).
CACHE_ASSETS 0

## Enables 'smart' asset caching, for assets that support it.
## This is a type of asset cache that automatically invalidates itself based on inputs to the asset generation.
## The cache is stored in `data/spritesheets/smart_cache/`.
## It lowers the generation cost and is safe to enable on development and production.
## This cache is only cleared by the game or manually, but it shouldn't affect the results.
## This setting is independent of `CACHE_ASSETS`, they do not affect each other whatsoever.
SMART_CACHE_ASSETS

## If this is uncommented, we will save all associated spritesheet PNGs and CSS files to a folder in the round-specific logs folder.
## Useful for developers to debug potential spritesheet issues to determine where the issue is cropping up (either in DM-side sprite generation or in the TGUI-side display of said spritesheet).
## Will only seek to waste disk space if ran on production.
#SAVE_SPRITESHEETS
